#!/bin/bash

PASSWORD=
DB_FILE_OPT=
filter=/tmp/filteraefddaef


echo '#!/usr/bin/env perl

use lib ($ENV{RLWRAP_FILTERDIR} or ".");
use RlwrapFilter;
use strict;

my $filter = new RlwrapFilter;
my $name = $filter -> name;
my @commands = ("ls", "cat", "add","addExisting", "copy", "file", "help", "exit", "quit");
my @services =  @ARGV;

$filter -> completion_handler(\&complete);


$filter -> run;

sub complete {
  my($line, $prefix, @completions) =@_;

  my $nwords = scalar split /\s+/, $line;
  $nwords++ unless $prefix;   # TAB at start of a new (empty) argument
  if ($nwords <= 1) {
    return  grep(/^$prefix/, @commands);
  }

  if ($nwords == 2) {
    my $first = (split /\s+/, $line)[0];
    if ($first eq "copy"){
        return grep(/^$prefix/, @services);
    }
    if ($first eq "cat"){
        return grep(/^$prefix/, @services);
    }
    if ($first eq "file") {
        return grep(/^$prefix/, @completions);
    }
    return ();
  }

  return ();
}

' > $filter
chmod u+x $filter

help(){
    cat << EOF
Commands:

help
    This help.

cat {service}
    Get the password for this *serivice*.

ls 
    List all the existing services.

add {service} 
    Add a password for a service. If *password* is omitted then a new generated one is given.

addExisting {service}
    Add an already existing password for a service. The password will be asked durring the process.

copy {service}
    Copy to the clipbord the password for *service*. (Use xsel)

file {file}
    Change the db file.

EOF
}

doCrypteos(){
    echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT $@
}

updateServices(){
    services="$( (doCrypteos --list || askMasterPassword) | tr "\n" " " 2>/dev/null )" 
}

askMasterPassword(){
    read -s -p "I need your password: " PASSWORD
    echo
    updateServices 
}

menu(){
    while [ "$reponse" != exit ] ; do 
        reponse="$(rlwrap -I -S 'crypteos> ' -pgreen -c -z "$filter $services" -o cat )"

        set -- $reponse 
        case "$1" in 
            help|h|\?)
                help
                ;;
            copy)
                echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT --get "$2" | xsel
                ;;
            cat)
                echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT --get "$2"
                ;;
            ls)
                echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT --list 
                ;;
            add)
                echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT --add "$2"
                updateServices
                ;;
            addExisting)
                read -s -e -p "Enter the password to add: " new_password
                echo 
                echo $PASSWORD | crypteos-bin --hidden false $DB_FILE_OPT --add "$2" --key "$new_password"
                updateServices
                ;;
            file)
                DB_FILE_OPT="--file \"$2\""
                askMasterPassword
                ;;
            exit|quit|q)
                exit 0
                ;;
            *)
                if [ -n "$reponse" ] ; then
                    echo "Command not found: '$reponse'"
                fi
                ;;
        esac
    done

}


askMasterPassword
menu
